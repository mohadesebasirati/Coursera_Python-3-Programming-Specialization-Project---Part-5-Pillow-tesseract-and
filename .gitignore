import zipfile

from PIL import Image
import pytesseract
import cv2 as cv
import numpy as np

# loading the face detection classifier
face_cascade = cv.CascadeClassifier('readonly/haarcascade_frontalface_default.xml')

import os
import io
import numpy as np

def get_news_info(image_path):
    news_info = {}
    with zipfile.ZipFile(image_path) as zippedImgs:
        for fname in zippedImgs.namelist():
            with zippedImgs.open(fname) as imgFile:
                # read image
                cv_img = cv.imdecode(np.frombuffer(imgFile.read(), np.uint8), 1)

                # convert to grayscale
                gray = cv.cvtColor(cv_img, cv.COLOR_BGR2GRAY)

                #extract faces
                faces = face_cascade.detectMultiScale(gray, 1.3, 5)

                # extract text
                img = Image.open(imgFile)
                text = pytesseract.image_to_string(img)

                # store news info
                news_info[fname] = (img, text, faces)
        
    return news_info

images_news_info = get_news_info('/home/jovyan/work/readonly/images.zip')

small_images_news_info = get_news_info('/home/jovyan/work/readonly/small_img.zip')

def get_faces(search_word, news_info):
    contact_img_height = 100
    contact_img_width = 100

    for fname in news_info.keys():

        text = news_info[fname][1]
        if search_word in text:
            # print text
            print('Results found in file', fname)

            # check to see if there are any faces
            faces = news_info[fname][2]
            if len(faces) < 1:
                print('But there were no faces in that file!')
                continue

            # define contact sheet
            num_rows = int(np.ceil(len(faces) / 5))
            contact_sheet = Image.new('RGB', (5*contact_img_width, num_rows*contact_img_height))

            # extract faces
            img = news_info[fname][0]
            face_imgs = []
            for face in faces:
                cropped_img = img.crop((face[0],face[1],face[0]+face[2],face[1]+face[3]))
                face_imgs.append(cropped_img)

            # add faces to contact sheet
            x=0
            y=0

            for face_img in face_imgs:
                # resize image if larger than intended dims
                face_img_width = face_img.width
                face_img_height = face_img.height
                if (face_img_width > contact_img_width) or (face_img_height > contact_img_height):
                    contact_sheet.paste(face_img.resize((contact_img_width, contact_img_height)), (x, y) )
                else:
                    contact_sheet.paste(face_img, (x, y) )
                if x+contact_img_width == contact_sheet.width:
                    x=0
                    y=y+contact_img_height
                else:
                    x=x+contact_img_width

            display(contact_sheet)

get_faces(search_word = "Christopher", news_info = small_images_news_info)
Results found in file a-0.png

Results found in file a-3.png


get_faces(search_word = "Mark", news_info = images_news_info)
Results found in file a-0.png

Results found in file a-1.png

Results found in file a-10.png
But there were no faces in that file!
Results found in file a-13.png

Results found in file a-2.png

Results found in file a-3.png

Results found in file a-8.png
But there were no faces in that file!
